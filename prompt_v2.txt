# 규칙  
- 반드시 모든 날짜에 대한 데이터를 수집할 것 (호출 오류를 제외)  
- 월별로 분할하여 실행하여 API 호출 부담을 줄임

# Python 도구 실행 (월별 분할 실행)  
이전 호출 후 JSON 파일 작성 전에 다음 호출 시작하지 말 것  


# 예시

## 2025년 12월
```bash
python flight_search_simple.py \
  --origin PUS \
  --destination NRT \
  --start-date 2025-12-01 \
  --end-date 2025-12-31 \
  --min-stay 5 \
  --max-stay 7 \
  --adults 1 \
  --seat economy \
  --save
```

## 2026년 1월
```bash
python flight_search_simple.py \
  --origin PUS \
  --destination NRT \
  --start-date 2026-01-01 \
  --end-date 2026-01-31 \
  --min-stay 5 \
  --max-stay 7 \
  --adults 1 \
  --seat economy \
  --save
```

# 데이터 처리 및 출력

0. 월별로 분할된 `flight_search_simple.py` 호출 후 각각 JSON 파일에 저장
1. **월별 파일명**: `PUS_NRT_flights_YYYYMMDD_HHMMSS.json` (타임스탬프 포함)
2. **통합 처리**: 두 파일을 합쳐서 최종 분석 수행
3. **직항편만 유지 (`stops=0`)**
4. **가격 없는 항공편 제거**
5. **각 출발일별 최저가 계산**
6. **가격 오름차순 정렬 후 상위 3개 선택**
7. 결과 표 작성

## 통합 데이터 처리 스크립트
```python
# process_nrt_data.py 실행
python process_nrt_data.py
```

| 순위 | 출발일 | 복귀일 | 항공편 | 총요금 | 출발시간 | 도착시간 | 소요시간 | 링크 |
| -- | --- | --- | --- | --- | ---- | ---- | ---- | -- |

# 조사 로그

* 건너뛴 날짜
* 실패 호출 목록
* 필드 매핑 불확실성 (예: airline, price, duration 등)

# 예시 실행 순서

1. **2025년 12월 검색 실행**
   ```bash
   python flight_search_simple.py --origin PUS --destination NRT --start-date 2025-12-01 --end-date 2025-12-31 --min-stay 5 --max-stay 7 --adults 1 --seat economy --save
   ```

2. **2026년 1월 검색 실행**
   ```bash
   python flight_search_simple.py --origin PUS --destination NRT --start-date 2026-01-01 --end-date 2026-01-31 --min-stay 5 --max-stay 7 --adults 1 --seat economy --save
   ```

3. **데이터 통합 및 분석**
   ```bash
   python process_nrt_data.py
   ```

4. **결과 확인**
   - `nrt_flight_results.json`: 통합 분석 결과
   - `nrt_final_results_summary.md`: 최종 요약 보고서

# Notion 업로드

최종 JSON 통합 후, 결과 표를 Notion 새 페이지에 작성